// Line states: [0, 9]
const LINE_IDLE = 1
const LINE_DIS = 2
const LINE_DIS_CHOKE = 3
const LINE_KVO = 4
const LINE_KVO_CHOKE = 5
range RANGE_LINE = LINE_IDLE..LINE_KVO_CHOKE

// Alarm states: [10, 19]
const ALARM_SILENT = 10
const ALARM_INSISTENT = 11
const ALARM_NON_INSISTENT = 12
const ALARM_CONTINUOUS = 13
range RANGE_ALARM = ALARM_SILENT..ALARM_CONTINUOUS

// Power state: [20, 29]
const POWER_PRIMARY = 20
const POWER_BATTERY = 21
const POWER_OFF = 22
range RANGE_POWER = POWER_PRIMARY..POWER_OFF

// Battery state: [30, 39]
const BATTERY_CHARGED = 30
const BATTERY_FAILED = 31
range RANGE_BATTERY = BATTERY_CHARGED..BATTERY_FAILED

// Control Panel States: [40, 49]
const CONTROL_LOCK = 40
const CONTROL_UNLOCK = 41
range RANGE_CONTROL_PANEL = CONTROL_LOCK..CONTROL_UNLOCK

// Number of lines
const N = 2

menu PumpMenu = {
    plug, unplug, turn_on, power_out, l1.choke, l2.choke, l1.kvo, l2.kvo, plug_back,
    l1.terminate, l2.terminate, l1.recover, l2.recover, l1.start, l2.start,
    l1.setting_confirmed, l2.setting_confirmed, lock_control_panel, unlock_control_panel
}

// Pump state
INFUSION_LINE = UNPLUGGED,
UNPLUGGED = (plug -> POWER_OFF),
POWER_OFF = (turn_on -> INFUSION[LINE_IDLE] | power_out -> UNPLUGGED),
INFUSION[l: RANGE_LINE] = (
    when (l == LINE_DIS) choke -> alarm_choke -> INFUSION[LINE_DIS_CHOKE] |
    when (l == LINE_DIS) kvo -> alarm_kvo -> INFUSION[LINE_KVO] |
    when (l == LINE_DIS) terminate -> INFUSION[LINE_IDLE]
    |
	when (l == LINE_DIS_CHOKE) recover -> INFUSION[LINE_DIS]|
	when (l == LINE_KVO_CHOKE) recover -> INFUSION[LINE_KVO]
    |
	when (l == LINE_KVO) choke -> alarm_choke -> INFUSION[LINE_KVO_CHOKE] |
    when (l == LINE_KVO) terminate -> INFUSION[LINE_IDLE]
    |
    when (l == LINE_IDLE) start -> setting_confirmed -> start_dispensing -> INFUSION[LINE_DIS]
    |
    power_out -> UNPLUGGED
).

// Alarm
ALARM = UNPLUGGED,
UNPLUGGED = (plug -> POWER_OFF),
POWER_OFF = (turn_on -> ALARM[ALARM_SILENT] | power_out -> UNPLUGGED),
ALARM[a: RANGE_ALARM] = (

    when(a == ALARM_INSISTENT) recover -> ALARM[ALARM_SILENT]|
    when(a == ALARM_INSISTENT) ring_continuously -> ALARM[ALARM_INSISTENT]
    |
    when(a == ALARM_SILENT) alarm_choke -> ALARM[ALARM_INSISTENT] |
    when(a == ALARM_SILENT) alarm_kvo -> ALARM[ALARM_NON_INSISTENT] |
    when(a == ALARM_SILENT) alarm_battery -> ALARM[ALARM_NON_INSISTENT]
    |
    when (a == ALARM_NON_INSISTENT) ring_once -> silent -> ALARM[ALARM_SILENT]
    |
    power_out -> UNPLUGGED
).

CONTROL_PANEL = UNPLUGGED,
UNPLUGGED = (plug -> POWER_OFF),
POWER_OFF = (turn_on -> CONTROL_PANEL[CONTROL_UNLOCK] | power_out -> UNPLUGGED),
CONTROL_PANEL[c: RANGE_CONTROL_PANEL] = (
    when (c == CONTROL_LOCK) unlock_control_panel -> CONTROL_PANEL[CONTROL_UNLOCK]
    |
    when (c == CONTROL_UNLOCK) lock_control_panel -> CONTROL_PANEL[CONTROL_LOCK]|
	when (c == CONTROL_UNLOCK) start -> CONTROL_PANEL[CONTROL_UNLOCK]|
	when (c == CONTROL_UNLOCK) terminate -> CONTROL_PANEL[CONTROL_UNLOCK]
    |
    power_out -> UNPLUGGED
).

// Power
POWER = POWER[POWER_OFF][BATTERY_CHARGED],
POWER[p: RANGE_POWER][b: RANGE_BATTERY] = (
    when (p == POWER_OFF) plug -> POWER[POWER_PRIMARY][BATTERY_CHARGED]
    |
	when (p == POWER_PRIMARY) unplug -> (
        when (b == BATTERY_CHARGED) alarm_battery -> POWER[POWER_BATTERY][b]|
        when (b == BATTERY_FAILED) unplug -> POWER[POWER_OFF][b]
    )
    |
    when (p == POWER_BATTERY) plug_back -> POWER[POWER_PRIMARY][b] |
    when (p == POWER_BATTERY) power_out -> POWER[POWER_OFF][BATTERY_FAILED]
).

|| LINES = (l1: INFUSION_LINE || l2 : INFUSION_LINE || {l1, l2}::ALARM || {l1, l2} :: CONTROL_PANEL || POWER)
/{pause/l1.pause, pause/l2.pause, continue/l1.continue, continue/l2.continue,
lock_control_panel/l1.lock_control_panel, lock_control_panel/l2.lock_control_panel,
unlock_control_panel/l1.unlock_control_panel, unlock_control_panel/l2.unlock_control_panel,
plug/l1.plug, plug/l2.plug, turn_on/l1.turn_on, turn_on/l2.turn_on, 
unplug/l1.unplug, unplug/l2.unplug, alarm_battery/l1.alarm_battery, 
alarm_battery/l2.alarm_battery, power_out/l1.power_out, power_out/l2.power_out,
power_out/l1.power_out, power_out/l2.power_out, plug_back/l1.plug_back, plug_back/l2.plug_back}.

// Assertion

const True = 1
const False = 0

// The pump cannot start pumping without the operator first confirming the settings on the pump.
fluent SETTING_CONFIRM_1 = <{l1.setting_confirmed}, {l1.terminate}>
assert CONFIRM_BEFORE_START_1 = (l1.start_dispensing -> SETTING_CONFIRM_1)

fluent SETTING_CONFIRM_2 = <{l2.setting_confirmed}, {l2.terminate}>
assert CONFIRM_BEFORE_START_2 = (l2.start_dispensing -> SETTING_CONFIRM_2)

// Electrical power can fail infinitely often.
fluent POWER_FAILED = <{unplug}, {plug, plug_back}>
assert POWER_FAIL = []<>POWER_FAILED

// If the backup battery power fails, pumping will not occur on any line.
fluent BACK_UP_BATTERY_FAILED = <{power_out}, {plug, plug_back}>
fluent LINE_PUMPING_1 =<{l1.start_dispensing}, {l1.terminate}>
fluent LINE_PUMPING_2 = <{l2.start_dispensing}, {l2.terminate}>
assert NO_PUMPING_WHEN_BATTERY_FAILED = (BACK_UP_BATTERY_FAILED -> ([]!(LINE_PUMPING_1 || LINE_PUMPING_2)))

// It is always possible to resume pumping after a failure.
fluent PUMP_FAILURE_1 = <{l1.choke}, {l1.recover}>
fluent PUMP_FAILURE_2 = <{l2.choke}, {l2.recover}>
fluent POWER_FAILURE = <{power_out}, {plug}>
assert RESUME = []((PUMP_FAILURE_1 -> <>!PUMP_FAILURE_1) && (PUMP_FAILURE_2 -> <>!PUMP_FAILURE_2) && (POWER_FAILURE -> <>!POWER_FAILURE)) 

// An alarm will sound on any line failure (blockage, pinching, empty fluid, or whatever failures you model).
fluent ALARM_SOUND = <{l1.alarm_choke,l2.alarm_choke}, {l1.recover, l2.recover}>
// copy PUMP_FAILURE_1 and PUMP_FAILURE_2 from above
assert ALARM_WILL_SOUND = []((PUMP_FAILURE_1 && PUMP_FAILURE_2) -> <>(ALARM_SOUND))

// In the absence of errors the pump will continue to pump until the treatment is finished.
fluent PUMPING_1 = <{l1.start_dispensing}, {l1.terminate}>
fluent PUMPING_2 = <{l2.start_dispensing}, {l2.terminate}>
fluent CHOKE_ERROR_1 = <{l1.choke}, {l1.recover}>
fluent CHOKE_ERROR_2 = <{l2.choke}, {l2.recover}>
fluent POWER_ERROR = <{power_out}, {plug}>
assert PUMPING_WITHOUT_CHOKE = ((PUMPING_1 -> (PUMPING_1 W (CHOKE_ERROR_1 || POWER_ERROR))) && (PUMPING_2 -> (PUMPING_2 W (CHOKE_ERROR_2 || POWER_ERROR))))

// Property A: If we switch to battery then non_insistent alarm will sound
fluent RUN_ON_BATTERY = <{unplug}, {plug, power_out}>
fluent ALARM_ONCE = <{ring_once},{silent}>
assert BATTERY_ALARM = [](RUN_ON_BATTERY -> (<> ALARM_ONCE))

// Property B: If the control panel is locked then no line cannot be terminated
fluent LOCKED_PANEL = <{lock_control_panel},{unlock_control_panel}>
fluent PANEL_ACTIONS = <{l1.terminate, l2.terminate},{l1.kvo, l2.kvo}>
assert NO_ACTION_LOCKED = [](LOCKED_PANEL -> <> ! PANEL_ACTIONS)











