// Line states: [0, 9]
const LINE_IDLE = 1
const LINE_DIS = 2
const LINE_CHOKE = 3
const LINE_KVO = 4
const LINE_PAUSE = 5
range RANGE_LINE = LINE_IDLE..LINE_PAUSE

// Alarm states: [10, 19]
const ALARM_SILENT = 10
const ALARM_INSISTENT = 11
const ALARM_NON_INSISTENT = 12
const ALARM_CONTINUOUS = 13
range RANGE_ALARM = ALARM_SILENT..ALARM_CONTINUOUS

// Power state: [20, 29]
const POWER_PRIMARY = 20
const POWER_BATTERY = 21
const POWER_OFF = 22
range RANGE_POWER = POWER_PRIMARY..POWER_OFF

// Battery state: [30, 39]
const BATTERY_CHARGED = 30
const BATTERY_FAILED = 31
range RANGE_BATTERY = BATTERY_CHARGED..BATTERY_FAILED

// Pump state
INFUSION = INFUSION[LINE_IDLE],
INFUSION[l: RANGE_LINE] = (
    when (l == LINE_DIS) dispense -> INFUSION[LINE_DIS] |
	when (l == LINE_DIS) continue -> INFUSION[LINE_DIS] |
    when (l == LINE_DIS) choke -> INFUSION[LINE_CHOKE] |
    when (l == LINE_DIS) idle -> INFUSION[LINE_IDLE] |
    when (l == LINE_DIS) kvo -> INFUSION[LINE_KVO] |
	when (l == LINE_DIS) pause -> INFUSION[LINE_PAUSE] 
    |
    when (l == LINE_CHOKE) alarm_choke -> INFUSION[LINE_CHOKE]|
	when (l == LINE_CHOKE) recover -> INFUSION[LINE_DIS]
    |
    when (l == LINE_KVO) alarm_kvo -> INFUSION[LINE_KVO]|
    when (l == LINE_KVO) finish -> INFUSION[LINE_IDLE]
    |
    when (l == LINE_IDLE) idle -> INFUSION[LINE_IDLE]|
    when (l == LINE_IDLE) dispense -> INFUSION[LINE_DIS]|
	when (l == LINE_IDLE) pause -> INFUSION[LINE_IDLE] |
	when (l == LINE_IDLE) continue -> INFUSION[LINE_IDLE]
	|
	when (l == LINE_PAUSE) continue -> INFUSION[LINE_DIS]
).

// Alarm
ALARM = ALARM[ALARM_SILENT],
ALARM[a: RANGE_ALARM] = (
    // TODO:
    when(a == ALARM_INSISTENT) recover -> ALARM[ALARM_SILENT]|
    when(a == ALARM_INSISTENT) insistent_alarm -> ALARM[ALARM_INSISTENT]
    |
    when(a == ALARM_SILENT) alarm_choke -> ALARM[ALARM_INSISTENT] |
    when(a == ALARM_SILENT) alarm_kvo -> ALARM[ALARM_NON_INSISTENT] |
    when(a == ALARM_SILENT) alarm_battery -> ALARM[ALARM_NON_INSISTENT]
    |
    when (a == ALARM_NON_INSISTENT) finish -> ALARM[ALARM_SILENT] |
    when (a == ALARM_NON_INSISTENT) non_insistent_alarm -> ALARM[ALARM_NON_INSISTENT]
).

// Power
POWER = POWER[POWER_OFF][BATTERY_CHARGED],
POWER[p: RANGE_POWER][b: RANGE_BATTERY] = (
    when (p == POWER_OFF) plug_in -> POWER[POWER_PRIMARY][b]
    |
    when (p == POWER_PRIMARY) charge_battery -> POWER[POWER_PRIMARY][BATTERY_CHARGED] |
	when (p == POWER_PRIMARY) plug_out -> (
        when (b == BATTERY_CHARGED) alarm_battery -> POWER[POWER_BATTERY][b]|
        when (b == BATTERY_FAILED) power_out -> POWER[POWER_OFF][b]
    )
    |
    when (p == POWER_BATTERY) plug_in -> POWER[POWER_PRIMARY][b] |
    when (p == POWER_BATTERY) power_out -> POWER[POWER_OFF][BATTERY_FAILED]
).


// Composition
|| PUMP = (l1: INFUSION || l2 : INFUSION || {l1, l2}::ALARM || POWER)
    /{pause/l1.pause, pause/l2.pause, continue/l1.continue, continue/l2.continue}.

